# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
   include:
     - main
     - releases/*

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerfilePath: '$(System.DefaultWorkingDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  testingPipeline: 'true'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: BuildAndTestArtifact
  displayName: "Build and test artifact"
  jobs:
  - job: BuildArtifact
    displayName: "Build Artifact"
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 8.0'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'
        verbosityRestore: 'Normal'
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--no-restore'
    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--no-build --no-restore --filter Category=Unit'
        testRunTitle: 'Register-Frontend-Unit-$(Build.BuildId)'
    - script: |
        pwsh Ofqual.Common.RegisterFrontend.Playwright/bin/Debug/net8.0/playwright.ps1 install --with-deps
      displayName: 'Install Playwright browsers'
    - script: |
        dotnet run --project Ofqual.Common.RegisterFrontend.csproj --urls "http://localhost:7159" &
        sleep 10
      displayName: 'Start Server'
      env:
        RegisterBaseUrl: $(RegisterBaseUrl)
        DefaultUrl: $(RegisterBaseUrl)
        RegisterAPIUrl: 'https://ofq-dev-apim-register-api.azure-api.net/'
        StorageContainerUrl: 'https://saofqregisterdev.blob.core.windows.net/'
        RefDataAPIUrl: 'https://ofq-dev-refdata2-fuasa5gxhfdhh4dd.ukwest-01.azurewebsites.net'
    - script: |
        dotnet test
      displayName: 'Run Playwright tests'
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

# Static Analysis stage: This stage runs static code analysis using SonarQube and audits dependencies for vulnerabilities.
- stage: StaticAnalysis
  displayName: "Run Static Analysis"
  jobs:
    # SonarQube job: This job performs static code analysis using SonarQube.
    - job: SonarQube
      condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/heads/main'))
      displayName: 'Build and SonarQube Analysis'
      pool:
        vmImage: $(vmImageName)
      steps:
        # Install .NET Core SDK
        - task: UseDotNet@2
          displayName: 'Install .NET Core SDK'
          inputs:
            version: 8.x
            performMultiLevelLookup: true
            includePreviewVersions: true

        # Restore NuGet packages
        - task: DotNetCoreCLI@2
          displayName: "Restore task"
          inputs:
            command: 'restore'
            projects: '**/*.csproj'
            feedsToUse: 'select'
            vstsFeed: 'b8db0229-c220-4583-b1d9-1111e482a1ce'

        # Prepare SonarQube analysis
        - task: SonarQubePrepare@5
          displayName: "Prepare SonarQube Analysis"
          inputs:
            SonarQube: 'Sonar-integration-register-front-end'
            scannerMode: 'MSBuild'
            projectKey: 'OfqualGovUK_ofqual-register-frontend_AZKvU5DXb83dXmjjBi1u'
            projectName: 'register'

        # PowerShell script to modify SonarQube parameters
        - task: PowerShell@2
          displayName: "Modify SonarQube Parameters"
          inputs:
            targetType: 'inline'
            script: |
              if ($env:BUILD_REASON -eq "PullRequest") {
                  $params = "$env:SONARQUBE_SCANNER_PARAMS" -replace '"sonar.pullrequest.*":"[\w,/,-]*"\,?'
              } else {
                  $params = "$env:SONARQUBE_SCANNER_PARAMS" -replace '"sonar.branch.name":"[\w,/,-]*"\,?'
              }
              Write-Host "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$params"
        - script: |
            ls
          displayName: "Pint ls"
        # # Build the project
        # - task: DotNetCoreCLI@2
        #   displayName: "Build task"
        #   inputs:
        #     command: "build"
        #     projects: "**/*.csproj"
        #     arguments: "--no-restore"

        # Run SonarQube analysis
        - task: SonarQubeAnalyze@5
          displayName: "SonarQube Analysis"

        # Publish SonarQube results
        - task: SonarQubePublish@5
          displayName: "Publish Results"
          inputs:
            pollingTimeoutSec: '300'

      # Audit job: This job audits dependencies for vulnerabilities.
    - job: Audit
      displayName: 'Audit Dependencies'
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: DotNetCoreCLI@2
          inputs:
            command: 'restore'
            projects: '**/*.csproj'
          displayName: 'Restore Nuget Packages'

        - task: Bash@3
          displayName: Check NuGet vulnerabilities
          inputs:
            targetType: 'inline'
            script: |
              dotnet list package --vulnerable --include-transitive 2>&1 | tee build.log
              echo "Analyse dotnet list package command log output..."
              if grep -q -i "critical\|high" build.log; then
                  echo "Must fix security vulnerabilities found on the log output"
                  exit 1
              else
                  echo "No critical or high severity vulnerabilities found."
                  exit 0
              fi

- stage: BuildAndTestDockerImage  
  displayName: Build and Test Docker Image
  jobs:
  - job: Build
    displayName: Build 
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: DownloadSecureFile@1
      name: downloadAppsettings
      displayName: 'Download App Settings for Health Check'
      inputs:
        secureFile: 'register-frontend-appsettings.json'

    - script: |
        mv $(downloadAppsettings.secureFilePath) $(Build.SourcesDirectory)/appsettings.json
      displayName: "Rename and Move appsettings.json"

    - script: |
        echo "Installing Trivy..."
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        trivy --version
      displayName: 'Install Trivy'

    - task: Docker@2
      displayName: Build Docker Image
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        tags: |
          latest
          $(tag)
    
    - script: |
        echo "Running Trivy Scan..."
        export PATH=$HOME/bin:$PATH
        trivy image $(imageRepository):$(tag) --exit-code 1 --severity HIGH,CRITICAL
      displayName: 'Run Trivy Scan'

    - script: |
        echo "Running Docker Container..."
        docker run -d --name healthcheck-container -v $(Build.SourcesDirectory)/appsettings.json:/app/appsettings.json $(imageRepository):$(tag)
      displayName: 'Run Docker Container'

    - script: |
        echo "Waiting for container to become healthy..."
        for i in {1..10}; do
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' healthcheck-container)
          if [ "$HEALTH_STATUS" == "healthy" ]; then
            echo "Container is healthy!"
            exit 0
          fi
          sleep 10
        done
        echo "Container did not become healthy within the expected time."
        echo "Checking container logs..."
        docker logs healthcheck-container
        exit 1
      displayName: 'Wait for Container Health Check'

    - script: |
        docker stop healthcheck-container
        docker rm healthcheck-container
      displayName: Cleanup Container
    
    - task: Docker@2
      displayName: Push Image to Container Registry
      condition: succeeded()
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/releases') }}:
          containerRegistry: $(dockerRegistryServiceConnectionProd)
        ${{ else }}:
          containerRegistry: $(dockerRegistryServiceConnectionDev)
        tags: |
          latest
          $(tag)
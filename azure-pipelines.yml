# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
   include:
     - main
     - releases/*

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerfilePath: '$(System.DefaultWorkingDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
# Static Analysis stage: This stage runs static code analysis using SonarQube and audits dependencies for vulnerabilities.
- stage: StaticAnalysis
  displayName: "Run Static Analysis"
  condition: always()
  jobs:
    # SonarQube job: This job performs static code analysis using SonarQube.
    - job: SonarQube
      condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/heads/main'))
      displayName: 'Build and SonarQube Analysis'
      pool:
        vmImage: $(vmImageName)
      steps:
        # Install .NET Core SDK
        - task: UseDotNet@2
          displayName: 'Install .NET Core SDK'
          inputs:
            version: 8.x
            performMultiLevelLookup: true
            includePreviewVersions: true

        # Restore NuGet packages
        - task: DotNetCoreCLI@2
          displayName: "Restore task"
          inputs:
            command: 'restore'
            projects: '**/*.csproj'
            feedsToUse: 'select'
            vstsFeed: 'b8db0229-c220-4583-b1d9-1111e482a1ce'

        # Prepare SonarQube analysis
        - task: SonarQubePrepare@5
          displayName: "Prepare SonarQube Analysis"
          inputs:
            SonarQube: 'Sonar-integration-register-front-end'
            scannerMode: 'MSBuild'
            projectKey: 'OfqualGovUK_ofqual-register-frontend_AZKvU5DXb83dXmjjBi1u'
            projectName: 'register'

        # PowerShell script to modify SonarQube parameters
        - task: PowerShell@2
          displayName: "Modify SonarQube Parameters"
          inputs:
            targetType: 'inline'
            script: |
              if ($env:BUILD_REASON -eq "PullRequest") {
                  $params = "$env:SONARQUBE_SCANNER_PARAMS" -replace '"sonar.pullrequest.*":"[\w,/,-]*"\,?'
              } else {
                  $params = "$env:SONARQUBE_SCANNER_PARAMS" -replace '"sonar.branch.name":"[\w,/,-]*"\,?'
              }
              Write-Host "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$params"

        # Build the project
        - task: DotNetCoreCLI@2
          displayName: "Build task"
          inputs:
            command: "build"
            projects: "**/*.csproj"
            arguments: "--configuration $(BuildConfiguration)"

        # Run SonarQube analysis
        - task: SonarQubeAnalyze@5
          displayName: "SonarQube Analysis"

        # Publish SonarQube results
        - task: SonarQubePublish@5
          displayName: "Publish Results"
          inputs:
            pollingTimeoutSec: '300'

      # Audit job: This job audits dependencies for vulnerabilities.
    - job: Audit
      displayName: 'Audit Dependencies'
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: DotNetCoreCLI@2
          inputs:
            command: 'restore'
            projects: '**/*.csproj'
          displayName: 'Restore Nuget Packages'

        - task: Bash@3
          displayName: Check NuGet vulnerabilities
          inputs:
            targetType: 'inline'
            script: |
              dotnet list package --vulnerable --include-transitive 2>&1 | tee build.log
              echo "Analyse dotnet list package command log output..."
              if grep -q -i "critical\|high" build.log; then
                  echo "Must fix security vulnerabilities found on the log output"
                  exit 1
              else
                  echo "No critical or high severity vulnerabilities found."
                  exit 0
              fi

- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        dockerfile: $(dockerfilePath)
        tags: |
          latest
          $(tag)
